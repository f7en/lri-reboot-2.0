// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.inbloom.content.domain;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.inbloom.content.domain.Standard;
import org.inbloom.content.domain.StandardDataOnDemand;
import org.springframework.stereotype.Component;

privileged aspect StandardDataOnDemand_Roo_DataOnDemand {
    
    declare @type: StandardDataOnDemand: @Component;
    
    private Random StandardDataOnDemand.rnd = new SecureRandom();
    
    private List<Standard> StandardDataOnDemand.data;
    
    public Standard StandardDataOnDemand.getNewTransientStandard(int index) {
        Standard obj = new Standard();
        setExternalId(obj, index);
        setHeading(obj, index);
        setName(obj, index);
        setParent(obj, index);
        setStandard_text(obj, index);
        setSubheading(obj, index);
        setUrl(obj, index);
        return obj;
    }
    
    public void StandardDataOnDemand.setExternalId(Standard obj, int index) {
        String externalId = "externalId_" + index;
        obj.setExternalId(externalId);
    }
    
    public void StandardDataOnDemand.setHeading(Standard obj, int index) {
        String heading = "heading_" + index;
        obj.setHeading(heading);
    }
    
    public void StandardDataOnDemand.setName(Standard obj, int index) {
        String name = "name_" + index;
        obj.setName(name);
    }
    
    public void StandardDataOnDemand.setParent(Standard obj, int index) {
        Standard parent = obj;
        obj.setParent(parent);
    }
    
    public void StandardDataOnDemand.setStandard_text(Standard obj, int index) {
        String standard_text = "standard_text_" + index;
        obj.setStandard_text(standard_text);
    }
    
    public void StandardDataOnDemand.setSubheading(Standard obj, int index) {
        String subheading = "subheading_" + index;
        obj.setSubheading(subheading);
    }
    
    public void StandardDataOnDemand.setUrl(Standard obj, int index) {
        String url = "url_" + index;
        obj.setUrl(url);
    }
    
    public Standard StandardDataOnDemand.getSpecificStandard(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Standard obj = data.get(index);
        Long id = obj.getId();
        return Standard.findStandard(id);
    }
    
    public Standard StandardDataOnDemand.getRandomStandard() {
        init();
        Standard obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Standard.findStandard(id);
    }
    
    public boolean StandardDataOnDemand.modifyStandard(Standard obj) {
        return false;
    }
    
    public void StandardDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Standard.findStandardEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Standard' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Standard>();
        for (int i = 0; i < 10; i++) {
            Standard obj = getNewTransientStandard(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
