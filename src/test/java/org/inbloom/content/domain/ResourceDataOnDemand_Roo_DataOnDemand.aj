// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.inbloom.content.domain;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.inbloom.content.domain.LangDataOnDemand;
import org.inbloom.content.domain.Resource;
import org.inbloom.content.domain.ResourceDataOnDemand;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect ResourceDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ResourceDataOnDemand: @Component;
    
    private Random ResourceDataOnDemand.rnd = new SecureRandom();
    
    private List<Resource> ResourceDataOnDemand.data;
    
    @Autowired
    LangDataOnDemand ResourceDataOnDemand.langDataOnDemand;
    
    public Resource ResourceDataOnDemand.getNewTransientResource(int index) {
        Resource obj = new Resource();
        setCopyrightYear(obj, index);
        setDescription(obj, index);
        setExternalGUID(obj, index);
        setIsBasedOnURL(obj, index);
        setName(obj, index);
        setSourceText(obj, index);
        setTimeRequired(obj, index);
        setURL(obj, index);
        setUseRightsURL(obj, index);
        return obj;
    }
    
    public void ResourceDataOnDemand.setCopyrightYear(Resource obj, int index) {
        String copyrightYear = "copyrightYear_" + index;
        obj.setCopyrightYear(copyrightYear);
    }
    
    public void ResourceDataOnDemand.setDescription(Resource obj, int index) {
        String description = "description_" + index;
        obj.setDescription(description);
    }
    
    public void ResourceDataOnDemand.setExternalGUID(Resource obj, int index) {
        String externalGUID = "externalGUID_" + index;
        obj.setExternalGUID(externalGUID);
    }
    
    public void ResourceDataOnDemand.setIsBasedOnURL(Resource obj, int index) {
        String isBasedOnURL = "isBasedOnURL_" + index;
        obj.setIsBasedOnURL(isBasedOnURL);
    }
    
    public void ResourceDataOnDemand.setName(Resource obj, int index) {
        String name = "name_" + index;
        obj.setName(name);
    }
    
    public void ResourceDataOnDemand.setSourceText(Resource obj, int index) {
        String sourceText = "sourceText_" + index;
        obj.setSourceText(sourceText);
    }
    
    public void ResourceDataOnDemand.setTimeRequired(Resource obj, int index) {
        String timeRequired = "timeRequired_" + index;
        obj.setTimeRequired(timeRequired);
    }
    
    public void ResourceDataOnDemand.setURL(Resource obj, int index) {
        String URL = "URL_" + index;
        obj.setURL(URL);
    }
    
    public void ResourceDataOnDemand.setUseRightsURL(Resource obj, int index) {
        String useRightsURL = "useRightsURL_" + index;
        obj.setUseRightsURL(useRightsURL);
    }
    
    public Resource ResourceDataOnDemand.getSpecificResource(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Resource obj = data.get(index);
        Long id = obj.getId();
        return Resource.findResource(id);
    }
    
    public Resource ResourceDataOnDemand.getRandomResource() {
        init();
        Resource obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Resource.findResource(id);
    }
    
    public boolean ResourceDataOnDemand.modifyResource(Resource obj) {
        return false;
    }
    
    public void ResourceDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Resource.findResourceEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Resource' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Resource>();
        for (int i = 0; i < 10; i++) {
            Resource obj = getNewTransientResource(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
